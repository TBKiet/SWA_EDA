name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: admin
          POSTGRES_USER: postgres
          POSTGRES_DB: userdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      kafka:
        image: confluentinc/cp-kafka:latest
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092

      zookeeper:
        image: confluentinc/cp-zookeeper:latest
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
        ports:
          - 2181:2181

    strategy:
      matrix:
        service: [user-service, event-service, registration-service, notification-service, auditlog-service, gateway]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '${{ matrix.service }}/package-lock.json'

    - name: Install dependencies
      working-directory: ${{ matrix.service }}
      run: npm ci

    - name: Wait for services
      run: |
        timeout 60 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
        sleep 10  # Wait for Kafka to be ready

    - name: Run tests
      working-directory: ${{ matrix.service }}
      env:
        NODE_ENV: test
        DATABASE_URL: postgres://postgres:admin@localhost:5432/userdb
        KAFKA_BROKERS: localhost:9092
      run: npm test

    - name: Run linting
      working-directory: ${{ matrix.service }}
      run: npm run lint --if-present

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user-service, event-service, registration-service, notification-service, auditlog-service, gateway, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      working-directory: ${{ matrix.service }}
      run: |
        if [ -f Dockerfile ]; then
          docker build -t ${{ matrix.service }}:latest .
        else
          echo "No Dockerfile found for ${{ matrix.service }}"
        fi
