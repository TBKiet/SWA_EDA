name: CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    strategy:
      matrix:
        service: [user-service, event-service, registration-service, notification-service, auditlog-service, gateway, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Check DockerHub credentials
      id: check-dockerhub
      run: |
        if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] || [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
          echo "dockerhub_configured=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è DockerHub credentials not configured. Skipping Docker push."
          echo "To enable Docker push, please set DOCKERHUB_USERNAME and DOCKERHUB_TOKEN secrets."
        else
          echo "dockerhub_configured=true" >> $GITHUB_OUTPUT
          echo "‚úÖ DockerHub credentials found."
        fi

    - name: Login to DockerHub
      if: steps.check-dockerhub.outputs.dockerhub_configured == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker image (local only)
      if: steps.check-dockerhub.outputs.dockerhub_configured == 'false'
      working-directory: ${{ matrix.service }}
      run: |
        if [ -f Dockerfile ]; then
          echo "üê≥ Building Docker image for ${{ matrix.service }} (local only)..."
          docker build -t ${{ matrix.service }}:${{ github.sha }} .
          echo "‚úÖ Docker image built successfully: ${{ matrix.service }}:${{ github.sha }}"
          echo "üìù To push to DockerHub, configure DOCKERHUB_USERNAME and DOCKERHUB_TOKEN secrets"
        else
          echo "üìÑ No Dockerfile found for ${{ matrix.service }}"
        fi

    - name: Build and push Docker image to DockerHub
      if: steps.check-dockerhub.outputs.dockerhub_configured == 'true'
      working-directory: ${{ matrix.service }}
      run: |
        if [ -f Dockerfile ]; then
          SERVICE_NAME=${{ matrix.service }}
          IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/${SERVICE_NAME}:${{ github.sha }}"
          LATEST_TAG="${{ secrets.DOCKERHUB_USERNAME }}/${SERVICE_NAME}:latest"

          echo "üê≥ Building and pushing Docker image for ${SERVICE_NAME}..."
          docker build -t ${IMAGE_TAG} -t ${LATEST_TAG} .
          docker push ${IMAGE_TAG}
          docker push ${LATEST_TAG}

          echo "‚úÖ Successfully pushed:"
          echo "  - ${IMAGE_TAG}"
          echo "  - ${LATEST_TAG}"
        else
          echo "üìÑ No Dockerfile found for ${{ matrix.service }}"
        fi

  deploy-staging:
    needs: deploy
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - name: Deploy to Staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Services: user-service, event-service, registration-service, notification-service, auditlog-service, gateway, frontend"
        echo "You can implement actual deployment commands here:"
        echo "  - kubectl apply -f k8s/"
        echo "  - docker-compose -f docker-compose.staging.yml up -d"
        echo "  - or deploy to cloud platforms like AWS ECS, Azure Container Instances, etc."

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to Production
      run: |
        echo "üéØ Deploying to production environment..."
        echo "This step requires manual approval in GitHub Environments"
        echo "Services will be deployed with zero-downtime strategy"
